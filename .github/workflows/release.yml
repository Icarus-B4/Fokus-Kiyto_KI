name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Components
        run: |
          echo "Installing Android SDK components..."
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          
          echo "Installing build tools..."
          yes | sdkmanager \
            "platform-tools" \
            "build-tools;33.0.0" \
            "platforms;android-33" \
            "extras;android;m2repository" \
            "extras;google;m2repository"
          
          echo "Accepting licenses..."
          yes | sdkmanager --licenses
          
          echo "Setting build tools path..."
          echo "ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_ENV
          echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH
          
          echo "Verifying installation..."
          ls -la $ANDROID_HOME/build-tools/33.0.0/
          $ANDROID_HOME/build-tools/33.0.0/aapt version

      - name: Create Root build.gradle
        run: |
          cat > build.gradle.kts << 'EOF'
          // Top-level build file
          plugins {
              id("com.android.application") version "8.2.2" apply false
              id("com.android.library") version "8.2.2" apply false
              id("org.jetbrains.kotlin.android") version "1.9.22" apply false
              id("org.jetbrains.kotlin.jvm") version "1.9.22" apply false
              id("androidx.navigation.safeargs.kotlin") version "2.7.7" apply false
              id("com.google.dagger.hilt.android") version "2.50" apply false
          }
          EOF

      - name: Create App build.gradle
        run: |
          mkdir -p app
          cat > app/build.gradle.kts << 'EOF'
          plugins {
              id("com.android.application")
              id("org.jetbrains.kotlin.android")
              id("org.jetbrains.kotlin.kapt")
              id("com.google.dagger.hilt.android")
              id("androidx.navigation.safeargs.kotlin")
          }

          android {
              namespace = "com.icarus.kiytoapp"
              compileSdk = 34

              defaultConfig {
                  applicationId = "com.icarus.kiytoapp"
                  minSdk = 24
                  targetSdk = 34
                  versionCode = 1
                  versionName = "1.0"
                  testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
              }

              buildTypes {
                  release {
                      isMinifyEnabled = true
                      isShrinkResources = true
                      proguardFiles(
                          getDefaultProguardFile("proguard-android-optimize.txt"),
                          "proguard-rules.pro"
                      )
                  }
              }

              buildFeatures {
                  compose = true
                  buildConfig = true
              }

              composeOptions {
                  kotlinCompilerExtensionVersion = "1.5.8"
              }

              compileOptions {
                  sourceCompatibility = JavaVersion.VERSION_17
                  targetCompatibility = JavaVersion.VERSION_17
              }

              kotlinOptions {
                  jvmTarget = "17"
              }

              packaging {
                  resources {
                      excludes += "/META-INF/{AL2.0,LGPL2.1}"
                  }
              }
          }

          dependencies {
              // AndroidX Core
              implementation("androidx.core:core-ktx:1.12.0")
              implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
              
              // Compose
              implementation("androidx.activity:activity-compose:1.8.2")
              implementation(platform("androidx.compose:compose-bom:2024.02.00"))
              implementation("androidx.compose.ui:ui")
              implementation("androidx.compose.ui:ui-graphics")
              implementation("androidx.compose.ui:ui-tooling-preview")
              implementation("androidx.compose.material3:material3")
              
              // Navigation
              implementation("androidx.navigation:navigation-fragment-ktx:2.7.7")
              implementation("androidx.navigation:navigation-ui-ktx:2.7.7")
              
              // Room
              implementation("androidx.room:room-runtime:2.6.1")
              implementation("androidx.room:room-ktx:2.6.1")
              kapt("androidx.room:room-compiler:2.6.1")
              
              // Hilt
              implementation("com.google.dagger:hilt-android:2.50")
              kapt("com.google.dagger:hilt-android-compiler:2.50")
              
              // Retrofit
              implementation("com.squareup.retrofit2:retrofit:2.9.0")
              implementation("com.squareup.retrofit2:converter-gson:2.9.0")
              implementation("com.squareup.okhttp3:okhttp:4.12.0")
              implementation("com.squareup.okhttp3:logging-interceptor:4.12.0")
              
              // Coil
              implementation("io.coil-kt:coil:2.5.0")
              implementation("io.coil-kt:coil-compose:2.5.0")
              
              // Accompanist
              implementation("com.google.accompanist:accompanist-permissions:0.32.0")
              
              // GenerativeAI
              implementation("com.google.ai.generativeai:generativeai:0.2.2")

              // Testing
              testImplementation("junit:junit:4.13.2")
              androidTestImplementation("androidx.test.ext:junit:1.1.5")
              androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
              androidTestImplementation(platform("androidx.compose:compose-bom:2024.02.00"))
              androidTestImplementation("androidx.compose.ui:ui-test-junit4")
              debugImplementation("androidx.compose.ui:ui-tooling")
              debugImplementation("androidx.compose.ui:ui-test-manifest")
          }
          EOF

      - name: Create App Structure
        run: |
          # Create main directory structure
          mkdir -p app/src/main/java/com/icarus/kiytoapp
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          
          # Create AndroidManifest.xml
          cat > app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <application
                  android:name=".KiytoApplication"
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher_round"
                  android:supportsRtl="true"
                  android:theme="@style/Theme.KiytoApp">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF
          
          # Create Application class
          cat > app/src/main/java/com/icarus/kiytoapp/KiytoApplication.kt << 'EOF'
          package com.icarus.kiytoapp
          
          import android.app.Application
          import dagger.hilt.android.HiltAndroidApp
          
          @HiltAndroidApp
          class KiytoApplication : Application()
          EOF
          
          # Create MainActivity
          cat > app/src/main/java/com/icarus/kiytoapp/MainActivity.kt << 'EOF'
          package com.icarus.kiytoapp
          
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.material3.Text
          import androidx.compose.runtime.Composable
          import androidx.compose.ui.tooling.preview.Preview
          import dagger.hilt.android.AndroidEntryPoint
          
          @AndroidEntryPoint
          class MainActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContent {
                      MainScreen()
                  }
              }
          }
          
          @Composable
          fun MainScreen() {
              Text(text = "Welcome to KiytoApp!")
          }
          
          @Preview
          @Composable
          fun MainScreenPreview() {
              MainScreen()
          }
          EOF
          
          # Create basic resources
          cat > app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">KiytoApp</string>
          </resources>
          EOF
          
          cat > app/src/main/res/values/themes.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="Theme.KiytoApp" parent="android:Theme.Material.Light.NoActionBar" />
          </resources>
          EOF

      - name: Create Proguard Rules
        run: |
          cat > app/proguard-rules.pro << 'EOF'
          # Allgemeine Android Regeln
          -keepattributes *Annotation*
          -keepattributes SourceFile,LineNumberTable
          -keep public class * extends java.lang.Exception
          -keep class com.icarus.kiytoapp.data.** { *; }
          -keep class com.icarus.kiytoapp.domain.** { *; }
          
          # Retrofit
          -keepattributes Signature
          -keepattributes Exceptions
          -keep class retrofit2.** { *; }
          -keepclasseswithmembers class * {
              @retrofit2.http.* <methods>;
          }
          
          # OkHttp
          -keepnames class okhttp3.internal.publicsuffix.PublicSuffixDatabase
          -dontwarn org.codehaus.mojo.animal_sniffer.*
          -dontwarn okhttp3.internal.platform.**
          
          # Gson
          -keepattributes Signature
          -keepattributes *Annotation*
          -dontwarn sun.misc.**
          -keep class com.google.gson.** { *; }
          
          # Hilt
          -keepclasseswithmembers class * {
              @dagger.* <methods>;
          }
          
          # Room
          -keep class * extends androidx.room.RoomDatabase
          -dontwarn androidx.room.paging.**
          EOF

      - name: Setup Gradle Properties
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m" > gradle.properties
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.parallel=false" >> gradle.properties

      - name: Setup Settings Gradle
        run: |
          cat > settings.gradle.kts << 'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }

          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google() {
                      content {
                          // Explicitly include androidx.navigation
                          includeGroupByRegex("androidx\\.navigation.*")
                      }
                  }
                  mavenCentral()
                  maven { url = uri("https://jitpack.io") }
                  maven { url = uri("https://maven.google.com") }
                  maven { url = uri("https://androidx.dev/snapshots/latest/artifacts/repository") }
              }
          }

          rootProject.name = "KiytoApp"
          include(":app")
          EOF

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create Keystore
        run: |
          mkdir -p keystore
          keytool -genkey -v \
            -keystore keystore/release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "CN=KiytoApp, OU=Development, O=Icarus-B4, L=Unknown, S=Unknown, C=DE"

      - name: Build Release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          OPENAI_API_KEY: "dummy-key"
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        run: |
          # Verify environment
          java -version
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "PATH=$PATH"
          
          # Debug Gradle files
          echo "Checking Gradle files:"
          ls -la
          ls -la gradle/
          cat settings.gradle.kts
          cat build.gradle.kts
          
          # Create gradle.properties for build scan
          echo "gradle.enterprise.url=https://ge.gradle.org" >> gradle.properties
          echo "gradle.enterprise.build.scan.terms-of-service-url=https://gradle.com/terms-of-service" >> gradle.properties
          echo "gradle.enterprise.build.scan.terms-of-service-agree=yes" >> gradle.properties
          
          # Clean and build
          ./gradlew clean assembleRelease --no-daemon --info --stacktrace \
            -Pandroid.useAndroidX=true \
            -Pandroid.enableJetifier=true || {
            
            echo "Build failed, checking logs..."
            
            if [ -f app/build/outputs/logs/manifest-merger-release-report.txt ]; then
              echo "Manifest merger log:"
              cat app/build/outputs/logs/manifest-merger-release-report.txt
            fi
            
            exit 1
          }

      - name: Sign APK
        env:
          BUILD_TOOLS_PATH: ${{ env.ANDROID_BUILD_TOOLS }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        run: |
          set -e
          
          echo "Signing APK..."
          $BUILD_TOOLS_PATH/zipalign -v -p 4 \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner sign --verbose \
            --ks keystore/release.keystore \
            --ks-key-alias "$SIGNING_KEY_ALIAS" \
            --ks-pass "pass:$SIGNING_STORE_PASSWORD" \
            --key-pass "pass:$SIGNING_KEY_PASSWORD" \
            --out app/build/outputs/apk/release/app-release.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner verify --verbose \
            app/build/outputs/apk/release/app-release.apk

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
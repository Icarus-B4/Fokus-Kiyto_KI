name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: wrapper
          cache-read-only: false
          cache-write-only: false
          gradle-home-cache-cleanup: true
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
          build-scan-publish: true
          build-scan-terms-of-use-url: "https://gradle.com/terms-of-service"
          build-scan-terms-of-use-agree: "yes"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Components
        run: |
          echo "Installing Android SDK components..."
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          
          echo "Installing build tools..."
          yes | sdkmanager \
            "platform-tools" \
            "build-tools;33.0.0" \
            "platforms;android-33" \
            "extras;android;m2repository" \
            "extras;google;m2repository"
          
          echo "Accepting licenses..."
          yes | sdkmanager --licenses
          
          echo "Setting build tools path..."
          echo "ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_ENV
          echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH
          
          echo "Verifying installation..."
          ls -la $ANDROID_HOME/build-tools/33.0.0/
          $ANDROID_HOME/build-tools/33.0.0/aapt version

      - name: Create Root build.gradle
        run: |
          cat > build.gradle.kts << 'EOF'
          // Top-level build file
          plugins {
              id("com.android.application") version "8.2.2" apply false
              id("com.android.library") version "8.2.2" apply false
              id("org.jetbrains.kotlin.android") version "1.9.22" apply false
              id("org.jetbrains.kotlin.jvm") version "1.9.22" apply false
              id("androidx.navigation.safeargs.kotlin") version "2.7.7" apply false
          }
          EOF

      - name: Setup Gradle Properties
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m" > gradle.properties
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.parallel=false" >> gradle.properties

      - name: Create Version Catalog
        run: |
          mkdir -p gradle
          cat > gradle/libs.versions.toml << 'EOF'
          [versions]
          agp = "8.2.2"
          kotlin = "1.9.22"
          core-ktx = "1.12.0"
          junit = "4.13.2"
          androidx-test-ext-junit = "1.1.5"
          espresso-core = "3.5.1"
          lifecycle-runtime-ktx = "2.7.0"
          activity-compose = "1.8.2"
          compose-bom = "2024.02.00"
          navigation = "2.7.7"
          room = "2.6.1"
          hilt = "2.50"
          retrofit = "2.9.0"
          okhttp = "4.12.0"
          coil = "2.5.0"
          accompanist = "0.32.0"
          generativeai = "0.2.2"

          [libraries]
          core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "core-ktx" }
          junit = { group = "junit", name = "junit", version.ref = "junit" }
          androidx-test-ext-junit = { group = "androidx.test.ext", name = "junit", version.ref = "androidx-test-ext-junit" }
          espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espresso-core" }
          lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycle-runtime-ktx" }
          activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activity-compose" }
          compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "compose-bom" }
          ui = { group = "androidx.compose.ui", name = "ui" }
          ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
          ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
          ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
          ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
          ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
          material3 = { group = "androidx.compose.material3", name = "material3" }
          navigation-fragment = { group = "androidx.navigation", name = "navigation-fragment-ktx", version.ref = "navigation" }
          navigation-ui = { group = "androidx.navigation", name = "navigation-ui-ktx", version.ref = "navigation" }
          room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
          room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
          room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
          hilt-android = { group = "com.google.dagger", name = "hilt-android", version.ref = "hilt" }
          hilt-compiler = { group = "com.google.dagger", name = "hilt-android-compiler", version.ref = "hilt" }
          retrofit = { group = "com.squareup.retrofit2", name = "retrofit", version.ref = "retrofit" }
          retrofit-converter-gson = { group = "com.squareup.retrofit2", name = "converter-gson", version.ref = "retrofit" }
          okhttp = { group = "com.squareup.okhttp3", name = "okhttp", version.ref = "okhttp" }
          okhttp-logging = { group = "com.squareup.okhttp3", name = "logging-interceptor", version.ref = "okhttp" }
          coil = { group = "io.coil-kt", name = "coil", version.ref = "coil" }
          coil-compose = { group = "io.coil-kt", name = "coil-compose", version.ref = "coil" }
          accompanist-permissions = { group = "com.google.accompanist", name = "accompanist-permissions", version.ref = "accompanist" }
          generativeai = { group = "com.google.ai.generativeai", name = "generativeai", version.ref = "generativeai" }

          [plugins]
          androidApplication = { id = "com.android.application", version.ref = "agp" }
          androidLibrary = { id = "com.android.library", version.ref = "agp" }
          kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
          kotlinKapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
          hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
          navigation-safeargs = { id = "androidx.navigation.safeargs.kotlin", version.ref = "navigation" }

          [bundles]
          room = ["room-runtime", "room-ktx"]
          retrofit = ["retrofit", "retrofit-converter-gson", "okhttp", "okhttp-logging"]
          EOF

      - name: Setup Settings Gradle
        run: |
          cat > settings.gradle.kts << 'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }

          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google() {
                      content {
                          // Explicitly include androidx.navigation
                          includeGroupByRegex("androidx\\.navigation.*")
                      }
                  }
                  mavenCentral()
                  maven { url = uri("https://jitpack.io") }
                  maven { url = uri("https://maven.google.com") }
                  maven { url = uri("https://androidx.dev/snapshots/latest/artifacts/repository") }
              }
              versionCatalogs {
                  create("libs") {
                      from(files("gradle/libs.versions.toml"))
                  }
              }
          }

          enableFeaturePreview("TYPESAFE_PROJECT_ACCESSORS")

          rootProject.name = "KiytoApp"
          include(":app")
          EOF

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create Keystore
        run: |
          mkdir -p keystore
          keytool -genkey -v \
            -keystore keystore/release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "CN=KiytoApp, OU=Development, O=Icarus-B4, L=Unknown, S=Unknown, C=DE"

      - name: Build Release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          OPENAI_API_KEY: "dummy-key"
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
        run: |
          # Verify environment
          java -version
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "PATH=$PATH"
          
          # Debug Gradle files
          echo "Checking Gradle files:"
          ls -la
          ls -la gradle/
          cat settings.gradle.kts
          cat build.gradle.kts
          
          # Create gradle.properties for build scan
          echo "gradle.enterprise.url=https://ge.gradle.org" >> gradle.properties
          echo "gradle.enterprise.build.scan.terms-of-service-url=https://gradle.com/terms-of-service" >> gradle.properties
          echo "gradle.enterprise.build.scan.terms-of-service-agree=yes" >> gradle.properties
          
          # Clean and build
          ./gradlew clean assembleRelease --no-daemon --info --stacktrace \
            -Pandroid.useAndroidX=true \
            -Pandroid.enableJetifier=true || {
            
            echo "Build failed, checking logs..."
            
            if [ -f app/build/outputs/logs/manifest-merger-release-report.txt ]; then
              echo "Manifest merger log:"
              cat app/build/outputs/logs/manifest-merger-release-report.txt
            fi
            
            exit 1
          }

      - name: Sign APK
        env:
          BUILD_TOOLS_PATH: ${{ env.ANDROID_BUILD_TOOLS }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        run: |
          set -e
          
          echo "Signing APK..."
          $BUILD_TOOLS_PATH/zipalign -v -p 4 \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner sign --verbose \
            --ks keystore/release.keystore \
            --ks-key-alias "$SIGNING_KEY_ALIAS" \
            --ks-pass "pass:$SIGNING_STORE_PASSWORD" \
            --key-pass "pass:$SIGNING_KEY_PASSWORD" \
            --out app/build/outputs/apk/release/app-release.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner verify --verbose \
            app/build/outputs/apk/release/app-release.apk

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK Components
        run: |
          echo "Installing Android SDK components..."
          mkdir -p $ANDROID_HOME/cmdline-tools/latest
          
          echo "Installing build tools..."
          yes | sdkmanager \
            "platform-tools" \
            "build-tools;33.0.0" \
            "platforms;android-33" \
            "extras;android;m2repository" \
            "extras;google;m2repository"
          
          echo "Accepting licenses..."
          yes | sdkmanager --licenses
          
          echo "Setting build tools path..."
          echo "ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_ENV
          echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH
          
          echo "Verifying installation..."
          ls -la $ANDROID_HOME/build-tools/33.0.0/
          $ANDROID_HOME/build-tools/33.0.0/aapt version

      - name: Setup Gradle
        run: |
          mkdir -p gradle
          cat << 'EOF' > gradle/libs.versions.toml
            [versions]
            firebase-crashlytics-buildtools = "2.9.9"
            generativeai = "0.2.2"
            cronet-embedded = "119.6045.31"
            androidx-adapters = "3.5.1"

            [libraries]
            firebase-crashlytics-buildtools = { group = "com.google.firebase", name = "firebase-crashlytics-buildtools", version.ref = "firebase-crashlytics-buildtools" }
            generativeai = { group = "com.google.ai.generativeai", name = "generativeai", version.ref = "generativeai" }
            cronet-embedded = { group = "org.chromium.net", name = "cronet-embedded", version.ref = "cronet-embedded" }
            androidx-adapters = { group = "androidx.test.espresso", name = "espresso-idling-resource", version.ref = "androidx-adapters" }
          EOF

          # Setup repositories
          cat << 'EOF' > settings.gradle.kts
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://jitpack.io") }
        maven { url = uri("https://maven.google.com") }
        maven { url = uri("https://androidx.dev/snapshots/latest/artifacts/repository") }
    }
}

rootProject.name = "KiytoApp"
include(":app")
EOF

      - name: Setup Gradle Properties
        run: |
          echo "org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m" > gradle.properties
          echo "android.useAndroidX=true" >> gradle.properties
          echo "android.enableJetifier=true" >> gradle.properties
          echo "org.gradle.daemon=false" >> gradle.properties
          echo "org.gradle.parallel=false" >> gradle.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create Keystore
        run: |
          mkdir -p keystore
          keytool -genkey -v \
            -keystore keystore/release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "CN=KiytoApp, OU=Development, O=Icarus-B4, L=Unknown, S=Unknown, C=DE"

      - name: Build Release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          OPENAI_API_KEY: "dummy-key"
        run: |
          # Verify environment
          java -version
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "PATH=$PATH"
          
          # Clean and build
          ./gradlew clean assembleRelease --no-daemon --info --stacktrace \
            -Pandroid.useAndroidX=true \
            -Pandroid.enableJetifier=true || {
            
            echo "Build failed, checking logs..."
            
            if [ -f app/build/outputs/logs/manifest-merger-release-report.txt ]; then
              echo "Manifest merger log:"
              cat app/build/outputs/logs/manifest-merger-release-report.txt
            fi
            
            echo "Gradle scan report..."
            ./gradlew --stop
            ./gradlew assembleRelease --scan
            
            exit 1
          }

      - name: Sign APK
        env:
          BUILD_TOOLS_PATH: ${{ env.ANDROID_BUILD_TOOLS }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        run: |
          set -e
          
          echo "Signing APK..."
          $BUILD_TOOLS_PATH/zipalign -v -p 4 \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner sign --verbose \
            --ks keystore/release.keystore \
            --ks-key-alias "$SIGNING_KEY_ALIAS" \
            --ks-pass "pass:$SIGNING_STORE_PASSWORD" \
            --key-pass "pass:$SIGNING_KEY_PASSWORD" \
            --out app/build/outputs/apk/release/app-release.apk \
            app/build/outputs/apk/release/app-release-aligned.apk
          
          $BUILD_TOOLS_PATH/apksigner verify --verbose \
            app/build/outputs/apk/release/app-release.apk

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
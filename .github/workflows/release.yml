name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android Build Tools
        run: |
          yes | sdkmanager --install "build-tools;33.0.0"
          yes | sdkmanager --licenses
          echo "ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_ENV
          echo "$ANDROID_HOME/build-tools/33.0.0" >> $GITHUB_PATH

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create Keystore
        run: |
          mkdir -p keystore
          keytool -genkey -v \
            -keystore keystore/release.keystore \
            -alias ${{ secrets.KEY_ALIAS }} \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass ${{ secrets.KEY_STORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            -dname "CN=KiytoApp, OU=Development, O=Icarus-B4, L=Unknown, S=Unknown, C=DE"

      - name: Build Release APK
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          OPENAI_API_KEY: "dummy-key"
        run: |
          echo "Debug: Current directory"
          pwd
          
          echo "Debug: Keystore location check"
          ls -la keystore/
          
          echo "Debug: Environment variables"
          env | grep SIGNING
          
          echo "Debug: Project directory check"
          ls -la
          
          echo "Debug: Gradle properties check"
          if [ -f gradle.properties ]; then
            echo "Gradle properties content:"
            cat gradle.properties
          else
            echo "No gradle.properties found"
          fi
          
          echo "Debug: Local properties check"
          if [ -f local.properties ]; then
            echo "Local properties content:"
            cat local.properties
          else
            echo "No local.properties found"
          fi
          
          echo "Debug: Starting Gradle build"
          ./gradlew assembleRelease --info --stacktrace || {
            echo "Debug: Gradle build failed, checking logs"
            if [ -f app/build/outputs/logs/manifest-merger-release-report.txt ]; then
              echo "Manifest merger log:"
              cat app/build/outputs/logs/manifest-merger-release-report.txt
            fi
            if [ -d app/build/reports ]; then
              echo "Build reports:"
              ls -R app/build/reports
            fi
            exit 1
          }
          
          echo "Debug: Checking build outputs"
          ls -R app/build/outputs

      - name: Sign APK
        env:
          BUILD_TOOLS_PATH: ${{ env.ANDROID_BUILD_TOOLS }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
        run: |
          set -e
          echo "Debug: Build tools path check"
          echo "BUILD_TOOLS_PATH=$BUILD_TOOLS_PATH"
          ls -la $BUILD_TOOLS_PATH
          
          echo "Debug: APK files check before signing"
          ls -la app/build/outputs/apk/release/
          
          echo "Debug: Keystore check"
          ls -la keystore/
          
          echo "Debug: Verify keystore file"
          if [ ! -f keystore/release.keystore ]; then
            echo "Error: Keystore file not found!"
            exit 1
          fi
          
          echo "Debug: Verify keystore permissions"
          chmod 600 keystore/release.keystore
          
          echo "Debug: Verify environment variables"
          if [ -z "$SIGNING_KEY_ALIAS" ] || [ -z "$SIGNING_KEY_PASSWORD" ] || [ -z "$SIGNING_STORE_PASSWORD" ]; then
            echo "Error: Missing signing configuration!"
            exit 1
          fi
          
          echo "Debug: Running zipalign"
          $BUILD_TOOLS_PATH/zipalign -v -p 4 app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release-aligned.apk || {
            echo "Error: zipalign failed!"
            exit 1
          }
          
          echo "Debug: Verify zipalign output"
          if [ ! -f app/build/outputs/apk/release/app-release-aligned.apk ]; then
            echo "Error: zipalign output not found!"
            exit 1
          fi
          
          echo "Debug: Running apksigner"
          $BUILD_TOOLS_PATH/apksigner sign --verbose \
            --ks keystore/release.keystore \
            --ks-key-alias "$SIGNING_KEY_ALIAS" \
            --ks-pass "pass:$SIGNING_STORE_PASSWORD" \
            --key-pass "pass:$SIGNING_KEY_PASSWORD" \
            --out app/build/outputs/apk/release/app-release.apk \
            app/build/outputs/apk/release/app-release-aligned.apk || {
            echo "Error: apksigner failed!"
            exit 1
          }
          
          echo "Debug: Verify signed APK"
          if [ ! -f app/build/outputs/apk/release/app-release.apk ]; then
            echo "Error: Signed APK not found!"
            exit 1
          fi
          
          echo "Debug: Verify APK signature"
          $BUILD_TOOLS_PATH/apksigner verify --verbose app/build/outputs/apk/release/app-release.apk || {
            echo "Error: APK signature verification failed!"
            exit 1
          }
          
          echo "Debug: Final APK check"
          ls -la app/build/outputs/apk/release/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/build/outputs/apk/release/app-release.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 